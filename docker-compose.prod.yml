services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tattoo-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tattoo-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # NestJS Backend API
  backend:
    image: mip92/tattoo-server:latest
    container_name: tattoo-backend-prod
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 1.1.1.1
    environment:
      NODE_ENV: production
      # Database Configuration
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Server Configuration
      PORT: ${SERVER_PORT}
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN}
      # S3 Configuration
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_PUBLIC_DOMAIN: ${S3_PUBLIC_DOMAIN}
      # CORS Configuration
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      # Mail Configuration
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_LOGIN: ${MAIL_LOGIN}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      # SMS Configuration
      KYIVSTAR_CLIENT_ID: ${KYIVSTAR_CLIENT_ID}
      KYIVSTAR_CLIENT_SECRET: ${KYIVSTAR_CLIENT_SECRET}
      KYIVSTAR_API_URL: ${KYIVSTAR_API_URL}
      SMS_SENDER: ${SMS_SENDER}
      NODE_OPTIONS: "--max-old-space-size=256"
    volumes: []
    networks:
      - tattoo-network
    ports:
      - "3000:3000" # API port
    command: npm run start:prod
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    image: mip92/tattoo-client:latest
    container_name: tattoo-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_OPTIONS: "--max-old-space-size=128"
    ports:
      - "3001:3000" # Frontend port
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - tattoo-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tattoo-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-local.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - tattoo-network

networks:
  tattoo-network:
    driver: bridge

volumes:
  postgres_data:
