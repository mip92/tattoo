generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String         @unique
  phone         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  password      String
  roleId        Int?
  refreshTokens RefreshToken[]
  role          Role?          @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        RoleType @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("roles")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Box {
  id        Int          @id @default(autoincrement())
  boxTypeId Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  boxType   BoxType?     @relation(fields: [boxTypeId], references: [id])
  products  BoxProduct[]

  @@map("boxes")
}

model BoxType {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boxes     Box[]

  @@map("box_type")
}

model BoxProduct {
  id            Int       @id @default(autoincrement())
  name          String
  quantity      Int
  date          DateTime?
  boxId         Int?
  productId     Int
  purchasePrice Int       @default(0)
  status        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  box           Box?      @relation(fields: [boxId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])

  @@map("boxes_products")
}

model Product {
  id          Int          @id @default(autoincrement())
  type        String
  name        String
  brandId     Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  boxProducts BoxProduct[]
  brand       Brand        @relation(fields: [brandId], references: [id])

  @@map("products")
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brands")
}
